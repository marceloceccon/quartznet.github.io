(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{448:function(e,t,a){"use strict";a.r(t);var n=a(26),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("As mentioned previously, you can make .NET component executable by the scheduler simply by making it\nimplement the IJob interface. Here is the interface:")]),e._v(" "),a("p",[a("strong",[e._v("IJob Interface")])]),e._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[e._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("namespace")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token namespace"}},[e._v("Quartz")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("interface")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IJob")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("JobExecutionContext")]),e._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("In case you couldn't guess, when the job's trigger fires (more on that in a moment), the Execute(..) method\nis invoked by the scheduler. The JobExecutionContext object that is passed to this method provides\nthe job instance with information about its \"run-time\" environment - a handle to the IScheduler that executed it,\na handle to the Trigger that triggered the execution, the job's JobDetail object, and a few other items.")]),e._v(" "),a("p",[e._v("The JobDetail object is created by the Quartz.NET client (your program) at the time the Job is added\nto the scheduler. It contains various property settings for the Job, as well as a JobDataMap, which can be used\nto store state information for a given instance of your job class.")]),e._v(" "),a("p",[e._v("Trigger objects are used to trigger the execution (or 'firing') of jobs. When you wish to schedule a job,\nyou instantiate a trigger and 'tune' its properties to provide the scheduling you wish to have.\nTriggers may also have a JobDataMap associated with them - this is useful to passing parameters to a Job\nthat are specific to the firings of the trigger. Quartz.NET ships with a handful of different trigger types,\nbut the most commonly used types are SimpleTrigger and CronTrigger.")]),e._v(" "),a("p",[e._v('SimpleTrigger is handy if you need \'one-shot\' execution (just single execution of a job at a given moment in time),\nor if you need to fire a job at a given time, and have it repeat N times, with a delay of T between executions.\nCronTrigger is useful if you wish to have triggering based on calendar-like schedules - such as "every Friday,\nat noon" or "at 10:15 on the 10th day of every month."')]),e._v(" "),a("h2",{attrs:{id:"why-jobs-and-triggers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-jobs-and-triggers"}},[e._v("#")]),e._v(" Why Jobs AND Triggers?")]),e._v(" "),a("p",[e._v("Many job schedulers do not have separate notions of jobs and triggers. Some define a 'job' as simply an\nexecution time (or schedule) along with some small job identifier. Others are much like the union\nof Quartz.NET's job and trigger objects. While developing Quartz for Java, Quartz team decided that it made sense to create\na separation between the schedule and the work to be performed on that schedule. This has (in our opinion)\nmany benefits.")]),e._v(" "),a("p",[e._v("For example, jobs can be created and stored in the job scheduler independent of a trigger, and many triggers\ncan be associated with the same job. Another benefit of this loose-coupling is the ability to configure jobs\nthat remain in the scheduler after their associated triggers have expired, so that that it can be rescheduled\nlater, without having to re-define it. It also allows you to modify or replace a trigger without having to\nre-define its associated job.")]),e._v(" "),a("h2",{attrs:{id:"identifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identifiers"}},[e._v("#")]),e._v(" Identifiers")]),e._v(" "),a("p",[e._v("Jobs and Triggers are given identifying names as they are registered with the Quartz.NET scheduler.\nJobs and triggers can also be placed into 'groups' which can be useful for organizing your jobs and triggers\ninto categories for later maintenance. The name of a job or trigger must be unique within its group - or in other\nwords, the true identifier of a job or trigger is its name + group. If you leave the group of the\nJob or Trigger 'null', it is equivalent to having specified SchedulerConstants.DefaultGroup.")]),e._v(" "),a("p",[e._v("You now have a general idea about what Jobs and Triggers are, you can learn more about them in\n"),a("RouterLink",{attrs:{to:"/documentation/quartz-1.x/tutorial/more-about-jobs.html"}},[e._v("Lesson 3: More About Jobs & JobDetails")]),e._v(" and "),a("RouterLink",{attrs:{to:"/documentation/quartz-1.x/tutorial/more-about-triggers.html"}},[e._v("Lesson 4: More About Triggers")])],1)])}),[],!1,null,null,null);t.default=o.exports}}]);